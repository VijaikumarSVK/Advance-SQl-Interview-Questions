-- youtube link - https://www.youtube.com/@VijaiTheAnalyst
-- Stripe
-- Repeated Payments - - identifying any payments made at the same merchant with the same credit card for the same amount 
-- within 10 minutes of each other and give the count of such repeated payments.

use youtubedb;

CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY AUTO_INCREMENT,
    CreditCardNumber VARCHAR(255) NOT NULL,  -- Or store as encrypted/hashed
    MerchantID INT NOT NULL,
    Amount DECIMAL(10, 2) NOT NULL,
    PaymentTimestamp TIMESTAMP NOT NULL
);
INSERT INTO Payments (CreditCardNumber, MerchantID, Amount, PaymentTimestamp)
SELECT
    -- Generate some semi-random credit card numbers (not real!)
    CONCAT('4', (FLOOR(RAND() * 10 +1))* 100000),  -- Visa prefix for example
    -- Generate merchant IDs (e.g., 1 to 10)
    FLOOR(RAND() * 10) + 1,
    -- Generate amounts (e.g., between $10 and $30)
    FLOOR(RAND() * 5) + 10,
    -- Generate timestamps within a specific range, with some clustered
    DATE_ADD('2024-01-01 00:00:00', INTERVAL FLOOR(RAND() * 50) MINUTE) -- Clustered around midnight
FROM
    (
    SELECT 1 
    UNION ALL SELECT 2 
    UNION ALL SELECT 3 
    UNION ALL SELECT 2
	UNION ALL SELECT 3
	UNION ALL SELECT 4
	UNION ALL SELECT 5
	UNION ALL SELECT 6
	UNION ALL SELECT 7
	UNION ALL SELECT 8
	UNION ALL SELECT 9
	UNION ALL SELECT 10
	UNION ALL SELECT 11
	UNION ALL SELECT 12
	UNION ALL SELECT 13
	UNION ALL SELECT 14
	UNION ALL SELECT 15
	UNION ALL SELECT 16
	UNION ALL SELECT 17
	UNION ALL SELECT 18
	UNION ALL SELECT 19
	UNION ALL SELECT 20
	UNION ALL SELECT 21
	UNION ALL SELECT 22
	UNION ALL SELECT 23
	UNION ALL SELECT 24
	UNION ALL SELECT 25
	UNION ALL SELECT 26
	UNION ALL SELECT 27
	UNION ALL SELECT 28
	UNION ALL SELECT 29
	UNION ALL SELECT 30
	UNION ALL SELECT 31
	UNION ALL SELECT 32
	UNION ALL SELECT 33
	UNION ALL SELECT 34
	UNION ALL SELECT 35
	UNION ALL SELECT 36
	UNION ALL SELECT 37
	UNION ALL SELECT 38
	UNION ALL SELECT 39
	UNION ALL SELECT 40
	UNION ALL SELECT 41
	UNION ALL SELECT 42
	UNION ALL SELECT 43
	UNION ALL SELECT 44
	UNION ALL SELECT 45
	UNION ALL SELECT 46
	UNION ALL SELECT 47
	UNION ALL SELECT 48
	UNION ALL SELECT 49
	UNION ALL SELECT 50
	UNION ALL SELECT 51
	UNION ALL SELECT 52
	UNION ALL SELECT 53
	UNION ALL SELECT 54
	UNION ALL SELECT 55
	UNION ALL SELECT 56
	UNION ALL SELECT 57
	UNION ALL SELECT 58
	UNION ALL SELECT 59
	UNION ALL SELECT 60
	UNION ALL SELECT 61
	UNION ALL SELECT 62
	UNION ALL SELECT 63
	UNION ALL SELECT 64
	UNION ALL SELECT 65
	UNION ALL SELECT 66
	UNION ALL SELECT 67
	UNION ALL SELECT 68
	UNION ALL SELECT 69
	UNION ALL SELECT 70
	UNION ALL SELECT 71
	UNION ALL SELECT 72
	UNION ALL SELECT 73
	UNION ALL SELECT 74
	UNION ALL SELECT 75
	UNION ALL SELECT 76
	UNION ALL SELECT 77
	UNION ALL SELECT 78
	UNION ALL SELECT 79
	UNION ALL SELECT 80
	UNION ALL SELECT 81
	UNION ALL SELECT 82
	UNION ALL SELECT 83
	UNION ALL SELECT 84
	UNION ALL SELECT 85
	UNION ALL SELECT 86
	UNION ALL SELECT 87
	UNION ALL SELECT 88
	UNION ALL SELECT 89
	UNION ALL SELECT 90
	UNION ALL SELECT 91
	UNION ALL SELECT 92
	UNION ALL SELECT 93
	UNION ALL SELECT 94
	UNION ALL SELECT 95
	UNION ALL SELECT 96
	UNION ALL SELECT 97
	UNION ALL SELECT 98
	UNION ALL SELECT 99
    UNION ALL SELECT 100
    ) 
    AS numbers;
  
with payments as (
select 
	*,
    rank() over(partition by creditcardnumber, MerchantID, amount order by PaymentTimestamp) as rnk,
    (minute(PaymentTimestamp) -
    lag(minute(PaymentTimestamp)) over(partition by creditcardnumber, MerchantID, amount order by PaymentTimestamp) ) as differnce
from payments
order by creditcardnumber, MerchantID, amount, PaymentTimestamp)

select count(MerchantID) as payment_cout
from payments
where differnce<=10;



